# ZSH related environment variables ========= BEGIN =======
# export ZDOTDIR="${XDG_CONFIG_HOME}/zsh"

# check if USER_BIN_HOME is set.
if [ -z "$USER_BIN_HOME" ]; then
    log_message "USER_BIN_HOME is not set. Please check be sure you set the ~/.zshenv"
    exit
fi

export ZSH="${USER_DEP_HOME}/oh-my-zsh"
export ZSH_CUSTOM="${ZSH}/custom"

if [ ! -d $ZSH ]; then
    log_message "oh-my-zsh not found, installing ..."
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --keep-zshrc --unattended
    log_message "Finished installing oh-my-zsh"
fi

if [ ! -d $ZSH_CUSTOM/plugins/zsh-syntax-highlighting ]; then
    log_message "zsh-syntax-highlighting not found, installing ..."
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting
    log_message "Finished installing zsh-syntax-highlighting"
fi

if [ ! -d $ZSH_CUSTOM/plugins/zsh-autosuggestions ]; then
    log_message "zsh-autosuggestions not found, installing ..."
    git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions
    log_message "Finished installing zsh-autosuggestions"
fi
# ZSH related environment variables ======== END ========


# Homebrew related environment variables ====== BEGIN ======

if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    export HOMEBREW_PREFIX="$USER_DEP_HOME/homebrew"
    export HOMEBREW_REPOSITORY="$USER_DEP_HOME/homebrew"
    export HOMEBREW_CELLAR="$HOMEBREW_PREFIX/Cellar"
    export HOMEBREW_NO_ANALYTICS=1

    export PATH="$HOMEBREW_PREFIX/bin:$PATH"
    export PATH="$HOMEBREW_PREFIX/sbin:$PATH"
    export MANPATH="$HOMEBREW_PREFIX/share/man:$MANPATH"
    export INFOPATH="$HOMEBREW_PREFIX/share/info:$INFOPATH"
fi

if command_exists brew; then
    echo "\033[32mÔÄå\033[0;39m  homebrew installed"
else
    log_message "Homebrew not found, please install it first"
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        mkdir -p $HOMEBREW_PREFIX >/dev/null 2>&1
        curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C $HOMEBREW_PREFIX
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    else
        log_message "üöº homebrew not found, please install it"
    fi
fi
# Homebrew related environment variables ====== END ========


export NVIM="${USER_CONFIG_HOME}/bin/nvim"
if ! command_exists nvim; then
    # Check system type
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        mkdir -p "${USER_CONFIG_HOME}/tmp" >/dev/null
        wget https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz -O ${USER_CONFIG_HOME}/tmp/nvim.tar.gz
        tar -xf ${USER_CONFIG_HOME}/tmp/nvim.tar.gz -C ${USER_CONFIG_HOME}/tmp
        cp -r ${USER_CONFIG_HOME}/tmp/nvim-linux-x86_64/* ${USER_CONFIG_HOME}
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        brew install neovim
    else
        log_message "üöº nvim not found, please install it"
    fi
fi


if ! command_exists pyenv; then
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        curl https://pyenv.run | bash
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        brew install pyenv
    else
        log_message "üöº pyenv not found, please install it"
    fi
fi


print_greetings





# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:/usr/local/bin:$PATH
export PATH=~/.local/bin/:$PATH

# ÂÖàÂ∞ùËØï‰ªéÂéÜÂè≤ËÆ∞ÂΩï‰∏≠Êü•ÊâæÂª∫ËÆÆÔºåÂ¶ÇÊûúÊâæ‰∏çÂà∞ÔºåÂÜç‰ªéË°•ÂÖ®ÂºïÊìé‰∏≠Êü•Êâæ„ÄÇ
export ZSH_AUTOSUGGEST_STRATEGY=(match_prev_cmd completion)
export HISTSILE=10000
export HISTFILE=$USER_CONFIG_HOME/.history
# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes

# ZSH_THEME="alanpeabody"
ZSH_THEME="steeef"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    git
    zsh-autosuggestions
    zsh-syntax-highlighting
)

source $ZSH/oh-my-zsh.sh

# Ëß£ÂÜ≥Ëøô‰∏™ÈóÆÈ¢òÔºöhttps://github.com/zsh-users/zsh-autosuggestions/issues/511
ZSH_AUTOSUGGEST_CLEAR_WIDGETS+=(bracketed-paste)
bindkey '^B' autosuggest-toggle

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Alias
alias cp="cp -i -v"
alias mv="mv -i -v"
alias rm="rm -i -v"
alias ga="gauth | awk -F ' ' 'NR==2 {print $3}'"
alias vpn="sudo openfortivpn -v -c ~/.oh-my-dotfiles/etc/openfortivpn/config.conf.local"

# source all .bash file in `completions``
for file in ${XDG_CONFIG_HOME}/completions/*; do
    source $file
done

echo ""
echo "ZSH is ready for $(hostname) üöÄ"
echo ""

export PATH="${USER_BIN_HOME}:${HOME}/.local/bin/:${PATH}"

# pnpm
export PNPM_HOME="${HOME}/.oh-my-dotfiles/data/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

# source ${HOME}/miniconda3/bin/activate

export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init - zsh)"
eval "$(pyenv virtualenv-init -)"
